===============================
※ 깃 처음 사용하기
===============================
>> git --version

▶ git 유저 이름 셋팅
>> git config --global user.email "zzzmini@~~~"
>> git config --global user.name "zzzmini"

▶ git 저장하고 커밋하기
>> git add 파일명1 파일명2
>> git add .

>> git commit -m "커밋메시지"

▶ git 상태 확인
>> git status

▶ commit 기록 확인
>> git log --all --oneline --graph

===============================
※ 브랜치 사용하기
===============================
▶ 브랜치 만들기
>> git branch 브랜치이름

▶ 브랜치 이동하기
>> git switch 브랜치이름

▶ 브랜치 합치기
1. 먼저 main으로 이동하고
2. 머지하기
>> git switch main
>> git merge 브랜치이름

>> git log --all --oneline --graph

▶ conflict 발생 시 → 처리
>> git add 파일명
>> git commit -m '멧떼지'

▶ branch 삭제
>> git branch -d 브랜치이름 (병합완료브랜치)
>> git branch -D 브랜치이름 (병합하지 않은 브랜치)

▶ rebase 하기
-- 브랜치의 시작점을 다른 commit으로 옮겨주는 것
1. rebase를 이용해서 신규브랜치의 시작점을 main 브랜치 최근 commit으로 옮긴 다음 
2. fast-forward merge

>> git switch 브랜치
>> git rebase main
>> git switch main
>> git merge 브랜치

▶ squach and merge
-- 브랜치에서 만들어놨던 많은 commit 을 다 합쳐서
하나의 commit으로 main 브랜치에 생성(텔레포트함)

>> git switch main
>> git merge --squash 브랜치명
>> git commit -m '메시지'

===============================
※ 되돌아가기
===============================

>> git log --oneline
-- 커밋 아이디 확인하기....좌측 노란색

▶ 파일 하나 되돌리기
>> git restore 파일명

▶ 특정 커밋아이디 시점으로 복구하기
>> git restroe --source 커밋아이디 파일명

===============================

▶ 커밋 되돌리기
특정 파일의 commit 취소하기
-> commit 하나를 취소하는 commit을 생성함.

>> git revert 커밋아이디
▷ 에디터에 커밋메시지 적고 닫으면 끝!
▷ vim Editor :wq

▶ 가장 최근 커밋 취소하기
>> git revert head

▶ 특정 commit 시점으로 되돌아 가기
>> git log  --oneline
ad28ca8 (HEAD -> main) c 파일 생성
d874b2b b 파일 생성
5b2b3kd a 파일 생성

>> git reset --hard d874b2b
--> a, b 남고 c 삭제 됨

>> git reset --soft d874b2b
--> a, c 남고 b 는 staging area에 남음
--> 커밋할 수 있음.

>> git reset --mixed d874b2b
--> a, c 남고 b 는 unstaged 됨
--> add하고, commit 할 수 있음.

===============================
※ 원격 사용하기
===============================
▶ git ignore 처리하기

>> gitignore.io

입력하기 : java, window, VisualStudioCode, IntelliJ+All, Gradle, react, vue.js, Node 등....


▶ 로컬브랜치 메인으로 바꾸기
>> git branch -M main


▶ 원격에 푸쉬하기
>> git push -u 원격주소 main

>> git push -u 
	https://github.com/zzzmini/my.git main

※ -u : 나의 저장소 기억

▶ 원격 저장소 저장하기
>> git remote add origin 
	https://github.com/zzzmini/my.git main

▶ -u 사용 후 원격 저장소에 저장하기
>> git push

===============================
※ 협업하기
===============================
▶ 원격 저장소 복사하기
>> 새 폴더 생성한 후
>> git clone 
	https://github.com/zzzmini/my.git main

▶ 로컬에서 브랜치 만들고 작업하기 
>> git branch mybranch
>> git switch mybranch
>> git add .
>> git commit -m 'First commit'
>> git switch main
>> git push origin mybranch

===============================
※ Pull Request 처리하기 - Merge Request ===============================

1. 위에서와 같이 처리하면 github 에 PR이 뜸.  
   - 하단에 commit 내역, 변경 내역 잘 보고..

2. 초록버튼 누르면 pull request 열림.

3. 코드 리뷰하고...
    👍 이나 LGTM(Looks Good To Me)
     이렇게 때려주고...
4. merge 하기
 - Create a merge commit : 3-way merge
 - Squash and merge : 깔끔해서 선호도 높음.
 - Rebase and merge : commit 이력 남겨 놓고
          main이랑 하나로 합침.

===============================
※ Branch 전략 
===============================
▶ git flow


            v0.9                                v1.0
   main   ● --------------------------  ●
              |                                    |  완성출시
              |       release ○------○---- ○
              |                   |  고칠거고침|  develop 반영
 develop ○ ------------○-------------○
              |                   |         
              |                   |
  feature  ○ ------ ○---○
                           |      |
       feature/guild  ○----


                    v1.0                       v1.0.1
   main   ------  ●-------------------  ●
                       ↘                        ↑
       급한버그픽스 ○ -----------------○ hotfix
                                                  ↓
 develop--------○----------------------○

▶ Trunk-based or git-hub flow

1. 기능추가, 버그픽스가 필요하면 main 브랜치에서 새로운 브랜치 생성
2. 브랜치마다 작명 잘 하고 커밋도 자세히
3. 기능이 완성되었으면 main 브랜치와 merge
4. 브랜치 쓸데없으니 삭제
5. main 브랜치에 있는 코드를 필요할 때 마다 유저들에게 배포

