1. source-tree 사용법(영문메뉴 변환 : 도구 - 옵션 - 언어 - English)
- 설치
- 계정 연결
2. 로컬저장소 생성 : c:/git-exam/git-main
▶ master 브랜치 명 변경 → main
3. 버전만들기(commit) vscode or textEditor
ⓐ 빈껍데기 index.html 생성 → 저장 → staging → commit → m : #1.첫번재 HTML파일 → commit
ⓑ <HTML></HTML> 추가 후 반복  (message : #2. HTML 추가)
ⓑ <Body></Body> 추가 후 반복  (message : #3. body 추가)

4. 되돌리기
▶ Readme.md 파일 생성 : Git 수업 웹페이지 입니다.
- 소스트리 하단 파일명에 ? 보임 : 아직 깃에게 관리를 요구하기 전 상태
▶ index.html body 중간에 Git 텍스트 추가  : 하단 파일명에 ... 쿠키모양 주황색 아이콘으로 됨.
<html>
  <body>
    Git
  </body>
</html>
- 얘는 깃에 의해 추적되고 있는 파일

ⓐ README.md 파일만 커밋
- m : README.md 파일 커밋
ⓑ README.md 파일 수정 : 이것은 Git 수업 웹페이지 입니다.
- 두 파일 모두 깃에 의해 관리되는 파일의 아이콘으로 변경됨.
ⓒ 두개 파일 수정
- index.html 수정 : <H1>Git</H1>
- README.md 파일 수정 : 맨 뒤에 쩜 삭제
ⓓ 모두 스테이지에 올리고 커밋하기
- m : 수정사항 저장 → commit
※ 하나의 버전 즉, 변경점(commit)는 한개 파일 또는 스테이징된 전체 파일이 된다.
ⓔ 다시 수정
- index.html 수정 : h1을 header로 감싼다.
<html>
  <body>
    <header>
      <H1>Git</H1>
    </header>
  </body>
</html>

- README.md 파일 수정 : Git 수업
※ 두 파일 중 관리하고자 하는 파일만 커밋하면 따로 관리가 가능하다.
ⓕ index.html 만 커밋
- m : Header 로 감쌈.
- index.html 만 관리 
- stage 영역을 두어 관리
※ working copy(아랫쪽) → add → index or staging area → commit(version list time line에 등록)

ⓖ 수정 시 별도로 관리 되는 파일
- readme.md 파일을 스테이징
- Git 수업입니다. 로 수정
- 두 개 영역에 모두 보임.
- 이때 커밋하게 되면 index or staging area에 있는 것만 커밋, 나머지는 그대로 working copy(아랫쪽)에 남게 된다.

ⓗ 되돌리기 기능(Discard) -- 커밋 전에 Uncommited changes 상태에서 원래대로 되돌리기
- index.html 에 있는 <header>태그가 불필요하여 제거 : 분홍색으로 삭제(-) 표시
- 다음에 보니 다시 필요하여 되돌리고 싶다.
- Discard 선택 후 이전 최종 커밋으로 되돌릴 수 있다.

5. Reset : 이미 커밋한 버전을 취소하기
▶ index.html body 태그를 추가했을 상태로 돌아가고 싶다. 이후 커밋들은 삭제하고 싶다.
- 먼저 기존 파일은 옆으로 복사해 놓고...

ⓐ Reset 하기 - 완전히
- 돌아가고 싶은 커밋 위치 선택하고
- Reset current branch to this commit → using mode → hard
- body 추가 이후에 모든 내용이 사라짐... 
※ 조심해서 사용해야 함.

ⓑ Reset 하기 - working copy는 유지하고 body 태그 이후 모두를 날려버리고 싶다.
- 두개의 파일에 모두 "첫번째 ...", "두번재 ..." 변경 후 두번 커밋
- 두개의 파일에 모두 "세번째 ..." 수정 후 대기 → Uncommited changes 상태
- 이 때 body 추가 이후는 날려버리고 working copy는 유지하고 싶다.
- Reset current branch to this commit → using mode → mixed 선택
- 최종 것만 남고 나머지는 body 이후것 모두 날라감.
- 현재 working copy를 최종 커밋해서 최종버전을 유지...

6. Revert 
- 우리가 선택한 버전을 취소해서 그 버전 이전 상태로 되돌리는 것.
- index.html 파일에 <header>를 추가하고 커밋
<html>
  <body>
    <header>
      <H1>Git</H1>
      OK....
      세번째...
    </header>
  </body>
</html>

▶ 방금 커밋한 header 추가 한 부분을 취소하고 싶다. 그러나 해당 버전은 유지시키는 것이 좋다.
왜? 나중에 다시 돌아갈 수도 있으니까...  Reset 등으로...
▶ 현재 버전을 그대로 두면서 한 단계 아래 "원상복구"로 돌아가고 싶다.

▶ 아래쪽으로 순차적으로 body tag 추가까지 Reverse commit을 해 나가면 기존 커밋들은 그대로
 둔채 body tag 추가 이전의 버전까지 되돌린다.

7. Branch 
- 작업을 분기해서 할 수 있는 것.
ⓐ 현재 최종 정리된 상태에서 branch 생성
- branch → mywork 브랜치 생성
- main 브랜치 checkout 

▶ 첫번째 커밋 : index.html - #1. main - UL 태그만 추가
<html>
  <body>
    <header>
      <h1>Git</h1>
    </header>
    <ul>
    </ul>
  </body>
</html>

▶ 두번째 커밋 : index.html - #2. main - LI 태그 추가
<html>
  <body>
    <header>
      <h1>Git</h1>
    </header>
    <ul>
      <li>이곳은</li>
    </ul>
  </body>
</html>

▶ 세번째 커밋 : index.html - #3. main - 두번째 LI 태그 추가
<html>
  <body>
    <header>
      <h1>Git</h1>
    </header>
    <ul>
      <li>이곳은</li>
      <li>정상 작업장소</li>
    </ul>
  </body>
</html>



ⓑ mywork 브랜치 checkout
▶ index.html - #1. mywork - head 태그 추가
<html>
  <head>
  </head>
</html>

▶ index.html - #2. mywork - head 태그에 Title 태그 추가
<html>
  <head>
    <title></title>
  </head>
</html>

▶ index.html - #3. mywork - Title 태그에 내용 추가
<html>
  <head>
    <title>나중에 수정될 가능성 있는 곳</title>
  </head>
</html>

8. Branch 병합하기 - Merge
- mywork 브랜치를 main 브랜치로 병합
ⓐ main 브랜치로 checkout
- mywork branch → 마우스 우클릭 → Merge mywork into current branch
▶ 머지 성공 : mywork branch 삭제

9. Branch 병합 - Conflict
- new-work 브랜치 생성
ⓐ new-work 브랜치에 <li>새로운 브랜치 추가</li> 추가 : #1-new-work 브랜치 추가
<html>
  <head>
    <title>나중에 수정될 가능성 있는 곳</title>
  </head>
  <body>
    <header>
      <h1>Git</h1>
    </header>
    <ul>
      <li>이곳은</li>
      <li>정상 작업장소</li>
      <li>새로운 브랜치 추가</li>
    </ul>
  </body>
</html>

ⓑ main checkout : <li>main 나도 추가</li> 같은 자리에 추가
: #1-main도 작업

▶ main 브랜치로 checkout
- new-work branch → 마우스 우클릭 → Merge mywork into current branch

※ merge conflicts 발생 : 두 브랜치에서 같은 곳을 수정했기 때문에 정리하라는 의미로 conflicts 
메시지를 던짐.

ⓒ vscode 이동
<<<<<<< HEAD
      <li>main 나도 추가</li>
=======
      <li>새로운 브랜치 추가</li>
>>>>>>> new-work

▶ 변경사항을 정리하고 저장 : new-work 것만 사용하기로 결정

ⓓ sourcetree로 돌아와서 Uncommited changes를 보면 아래쪽 노란색 경고 그림 보임..
▶ 처리 : 변경 파일 마우스 우클릭 → Resolve conflicts → Mark Resolved
→ Unstaged files 에서 → Staged files로 옮겨짐. → 커밋 → 새로 생긴 커밋 메시지 그대로 커밋 함.

10. 충돌 최소화하기
- new-work 브랜치 생성
ⓐ main 에서
<li>충돌</li> → 커밋 #1: main-충돌 입력

ⓑ work3 이동 → main 브랜치 내용 가져오기 → main에 우클릭 → Merge main into current branch
▶ main과 work3 브래치가 머지 됨.

<li>충돌해결</li> → 커밋 #1: work3-충돌해결

ⓒ main 에서
<li>원격저장소</li> → 커밋 #2: main-원격저장소

ⓓ work3 에서 내용 가져오기 → main에 우클릭 → Merge main into current branch
▶ main과 work3 브래치가 충돌남

※ 작은 충돌을 해결하는 것이 큰 충돌을 해결하는 것이다.

12. 원격저장소 연결하기
- github.com : git-work 레포지토리 생성하기
- 저장소 URi 정보 카피

ⓐ 로컬 저장소와 원격저장소 연결하기
- Repository → Add Remote... → Add  → Url/Path  → 레포지토리 주소 붙여넣기 → Default Remote
→ OK

ⓑ 원격으로 Push 하기
- Push → main Check → Remote branch "main" 확인 → OK
▶ 내용추가하고 커밋하기

      <li>원격에 추가</li>
      <li>Push</li>

- Staging → commit → 상단 Push에 숫자 표시됨.  → Push

▶ 그래프에서 main은 로컬을 가리킴.  origin/main은 깃헙을 가리킴. --- 두 곳이 늘 일치해야 한다.

ⓒ GitHub에서 커밋 내역 확인하기 
- github → 우측 시계모양 commits  클릭하고 확인하기


13. 원격리포지토리 클론하기

▶ 협업 기능을 가장해서 로컬에 추가 디렉토리 만들고 깃이 관리하게 만들기

ⓐ 클론으로 원격에 있는 자료 다운로드 하기

- 새로운 탭 추가하기(맨 위 + 기로) → Clone Repository → 원격으로 가서 클론 URL 복사
→  원격 주소에 붙여넣기 → 로컬 위치 찾기 → 기존 git-exam 폴더 하위에 git-clone 폴더 생성 후
→ 연결 → Clone

▷ 우 상단 Explorer → 현재 설정된 디렉토리와 클론된 파일 확인 가능


14. 깃으로 협업하기
● 두개의 탭은 서로 다른 사람이라고 생각하고 진행

ⓐ git-main에서 파일 변경 후 Push 하기

      <li>깃-메인에서 Push</li>

- 커밋 메시지 : #main-깃-메인에서 Push → 원격으로 푸쒸....!(Push)

★★★★★★★★★★★★★★★★
-------------------------------------------------------------
★ 공동작업자가 업무 시작 전 반드시 해야 할 작업 :  Pull!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

→ 충돌방지 및 여러가지 문제 발생 미연 방지
-------------------------------------------------------------

ⓑ 다른 작업자 git-clone 에서 작업하기

- git-clone 탭 선택 → Pull

- index.html 열고 수정 후 커밋 → Push

      <li>깃-클론으로 Pull</li>

- Staging → Commit -m #clone - 클론에서 Pull → Push


ⓒ 다시 git-main에서 작업하기
- git-main 탭 선택 → 일단 Pull 하는 것을 잊어버렸고요~~~~

- index.html 열고 수정 후 커밋 → Push

    <title>같이 작업하게 되서 방가~</title>

- Staging → Commit -m #main-방가방가~ → Push

★ Pushing Error !! 발생 : 푸쉬하기 전에 먼저 변경점이 있는가 Pull을 받아야는데 안받아서 생긴 에러!!

풀을 받으면 git-clone가 작업한 내용과 내가 commit 한 내용이 merge가 된다.

- cancle → Pull → Merge 내용 확인 후 → 다시 Push

▶▶▶▶▶ 협업 시 작업 순서 : pull → work → commit → pull → push


15. 깃으로 협업할 때 충돌 처리하기
● 두개의 탭은 서로 다른 사람이라고 생각하고 진행

ⓐ git-clone : Pull → 파일 변경 후 Push 하기

      <li>깃-클론 충돌날걸?</li>

- commit msg : #clone-충돌날거야 → Pull → Push


ⓑ git-main : Pull → 파일 변경 후 Push 하기

      <li>깃-메인 글쎄 충돌 날까?</li>

- commit msg : #main-글쎄..충돌?  → Pull

########## 역시나 Push 하기 전 Pull 할 때 충돌이 일어난다.

      <li>깃-클로으로 Pull</li>
<<<<<<< HEAD
      <li>깃-메인 글쎄 충돌 날까?</li>
=======
      <li>깃-클론 충돌날걸?</li>
>>>>>>> c7475a76efea5ed498d01b2f1dd514c530937d59
    </ul>

 → 두 사람이 머리를 맞대고 어찌 해결해야 할 지 고민한 후 결정한다.
▶ 결론: 두가지를 함께 사용하기로 하였다. → 수정 후 저장.

▶ Unstaged files에 있는 수정 된 파일 마우스 우클릭 → Resolve Conflicts → Mark Resolved
 → commit → push


16. Stash 사용하기
● main에서 작업을 하던 중 중요하게 처리할 업무가 발생해 버림....

-- 작업하던건? 어쩔?   → 브랜치를 만들어하는 방법도 있으나 Stash 기능을 이용해 보자...

ⓐ git-main : Pull → 파일 변경 작업 중

      <li>Sta.....어쩌구</li>

→ 저장 → 갑자기 콜 받음.  → 해당 작업처리해야니까 → 언스테이지에 있는 index.html 파일 선택
→ Stash 클릭 → Stash Changes? → 대충 작업내용 기록 함. → Working--Sta 라고 쓰고 OK

▶ uncommited가 사라지고 해당 index.html 파일을 보면 작업중이던 작업이 사라진 형태로 보임.

ⓑ 얘는 어디갔느냐? 좌측 사이드바 맨 밑 STASHED 클릭 → 아래에 보임... → 아까 작업하던 내용 보임.

▷▷▷▷ 요청 작업 진행
    <title>제목을 원래대로 바꿉니다.</title>

- commit msg : #main-제목변경 → Pull → Push

▷▷▷▷ 요청 작업 완료 했으니 원래 나 하던 작업 다시 진행

▶ 우측 사이드바 → STASHED 클릭 → 아래에 보이는 거 중 작업 할 대상 우클릭 → Apply stash......
           → Delete after applying Checked → 확인

ⓒ 작업 중 또 다시 발생한 작업지시...
→ 일단 여기까지 작업한 index.html 파일을 스테이징...
→ 다시 추가 변경작업 진행

      <li>Sta.....또 작업 중....</li>

→ 저장하면...    index.html 은 Staged files와 Unstaged files 두 곳 모두 보이게 된다.

▶▶▶▶▶▶ 또!!  다른 작업하라고 함... 위에 파일 우클릭...

→ 위 Stash 클릭 → Stash Changes? → 대충 작업내용 기록 함. → 2th-work라고 쓰고 OK

▶ 좌측 스테이스 클릭해서 확인해 보면 두 작업 모두 병합되어 하나로 기록되어서 보관중이다.

ⓓ 스테이시하던 바로 그 곳 코드를 수정하였다.....
→ 다시 추가 변경작업 진행

      <li>Stash Complete!</li>

→ 저장 → staging → commit -m #main-Stash Complete!  → Pull → Push

▶ 우측 사이드바 → STASHED 클릭 → 아래에 보이는 거 중 작업 할 대상 우클릭 → Apply stash......
           → Delete after applying Checked → 확인

<<<<<<< Updated upstream
      <li>Stash Complete!</li>
=======
      <li>Sta.....어쩌구</li>
      <li>Sta.....또 작업 중....</li>
>>>>>>> Stashed changes


▶▶▶▶▶▶ 역시 충돌 남... 해결은 스스로....

      <li>Stash Complete!</li> 만 남기고 모두 삭제하여 정리.... 
