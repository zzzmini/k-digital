1. 알고리즘 코딩 테스트 문제의 입출력 형식

※ 알고리즘 문제에서는 적절한(약속된) 입출력 양식이 주어진다.
ⓐ 첫 번째 단계는 데이터를 입력받거나 생성하는 것
ⓑ 이후에 적절한 알고리즘을 사용하여 도출된 정답을 정확한
   형식으로 출력한다.

- 예시) N명의 학생의 성적 데이터가 주어졌을 때 이를 내림차순으로
       정렬한 결과를 출력하여라.
-- 입력형식 : 첫째 줄에는 학생의 수 N이 자연수로 주어지고, 둘째
   줄에 공백을 기준으로 하여 N명의 학생에 대한 성적이 정수 형태로
   주어진다.(2 ≤ N ≤ 1,000, 0 ≤ 성적 ≤ 100)
-- 출력형식 : N명의 학생의 성적으로 내림차순 정렬한 결과를 첫째
   줄에 공백을 기준으로 구분하여 출력하여라.

-- [입력예시]
   5
   17 88 53 100 73
-- [출력예시]
   100 88 73 53 17

2. 기본 출력
console.log('Hello World!');

result = 35;
console.log(`정답은 ${result}입니다.`);  --- 백틱 사용

3. 사칙연산
a = 7;
b = 3;
console.log(a + b);
console.log(a - b);
console.log(a * b);
console.log(parseInt(a / b));   // 몫만 남기기
console.log(a % b);  // 나머지 구하기

4. 결과를 모아놨다가 한번에 출력하기 -- 시간이 많이 단축 함.

let answer = '';
for(let i = 1; i<=100 ; i++){
    answer = answer + i + '\n';
    // answer += i + '\n';
}

console.log(answer);

5. 파일시스템 모듈의 사용
※ /dev/stdin 파일에 적힌 텍스트 파일을 읽어오는 경우 사용

// readline 모듈보다는 fs 모듈을 사용해 전체를 읽어들임

let fs = require('fs');
let input = fs.readFileSync('/dev/stdin')
                .toString().split('\n');

//let input = fs.readFileSync('input.txt')
    .toString().split('\n');
console.log(input);

▷ input.txt 직접 생성하고 테스트하기
5
17 88 53 100 73

6. 한 줄씩 입력받아 처리한 후 출력 : readline 모듈

const rl = require('readline').createInterface({
    input : process.stdin,
    output : process.stdout
});

let input = [];

rl.on('line', function(line){
    // 콘솔에서 Enter 입력 할 때마다 호출
    input.push(line);
}).on('close', function(close){
    // 콘솔에서 Ctrl+C or Ctrl+D 입력 시 호출
    console.log(input);
    process.exit();
})

7. 조건문

if(condition1) {
    statment1
} else if(condition2){
    statment2
} else if(condition2){
    statment3
} .....

else {
    statment4
}

8. for 반복문

for(초기문 ; 조건문; 증감문){
    // 실행되는 코드 부분
}

※ 1부터 100까지 더하기
let sum = 0;
for(let i=1; i<=100; i++){
    sum += i;
}
console.log(sum);

9. while 반복문
/* 
- while 문은 조건이 참일 때 실행되는 반복문
- 블록 내부의 코드가 실행되기 전에 참 또는 거짓을 판단
*/
while(조건문){
    // 실행되는 코드 부분
}

※ 1부터 100까지 더하기
let sum = 0;
let i = 1;
while(i <= 100) {
    sum += i;
    i ++;
}

console.log(sum);

10. 수(number) 데이터와 문자열(string) 데이터간 상호 변환

/*
Int -> String
*/
let a = '777';
let b = Number(a);
console.log(b, typeof(b));    //  777 number

/*
String -> Int
*/
a = 777;
b = String(a);
console.log(b, typeof(b));    //  777 String

11. Array.prototype.reduce() 
/*
reduce() 메서드는 배열의 각 요소에 대해 reducer 함수를 실행 한
뒤에 하나의 결과를 반환함.
※ reducer의 형태 : (accumulator, currentValue)=>(반환값)
- 배열의 각 원소를 하나씩 확인, 각 원소는 currentValue에 들어감.
- 반환값은 그 이후 원소에 대해 accumulator에 저장
*/

let data = [5, 2, 9, 8, 4];
// minValue 구하기
let minValue = data.reduce((a,b) => Math.min(a,b));
console.log(minValue);

// 원소의 합 구하기
let sum = data.reduce((a,b) => a + b);
console.log(sum);

12. 배열의 초기화 방법

// 직접 값을 설정하여 초기화
let arr = [8, 1, 4, 5, 7];

// 길이가 5이고 모든 원소의 값이 0인 배열 초기화
let arr = new Array(5).fill(0);

13. 집합 자료형(Set)
※ 특정한 원소의 등장 여부 파악할 때 자주 사용

let mySet = new Set();  // 집합 객체 생성

// 여러 개의 원소 삽입
mySet.add(3);
mySet.add(5);
mySet.add(7);
mySet.add(3);

console.log(`원소의 개수 : ${mySet.size}`);
console.log(`원소 7을 포함하고 있는가? ${mySet.has(7)}`);

// 원소 5 제거
mySet.delete(5);

// 원소를 하나씩 출력
for(let item of mySet){
    console.log(item);
}

14. 소수점 아래 특정 자리에서 반올림하기

let x = 123.456;
console.log(x.toFixed(2));   // 123.46

15. Escape Sequence

-- 예약 문자 혹은 특수문자를 출력하기 위해 사용
-- \t : 탭
-- \\ : 역 슬래시
-- \" : 큰 따옴표
-- \' : 작은 따옴표

console.log("그는 \"비겁함\"을 보였다.");

