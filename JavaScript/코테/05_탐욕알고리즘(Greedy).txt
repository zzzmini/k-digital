1. 탐욕알고리즘(Greedy Algorithm)

- 현재 상황에서 당장 가장 좋아 보이는 상황만을 선택하는 알고리즘
- 흔히, 그리디 알고리즘, 혹은 탐욕법이라고 불리기도 함.
- 최적의 해를 구하기 위한 근사적인 방법으로 사용될 때가 많다.

※ 탐욕알고리즘 예시
ⓐ 루트에서 출발하여 단말 노드까지 가는 경우
ⓑ 거쳐가는 노드의 합이 가장 큰 경우는?
ⓒ 최적의 해는 10 이다.
ⓓ 그러나, 매 상황에서 단순히 가장 큰 노드를 선택(탐욕)
   하는 경우 8 이라는 대략의 큰 값을 빠르게 얻을 수 있다.
ⓔ 최적의 해를 놓칠 수는 있지만 근사해를 구할 경우 사용 가능하다.
                 1
             ↙   ↓  ↘
            2    5    4
         ↙  ↓    ↓   ↙ ↘  
        6    5   2   3   5


- 알고리즘 접근 방법
ⓐ 방법 고안하기 : 현재 상황에서 어떤 것을 선택할지 고안.
ⓑ 정당성 확인 : 고안한 알고리즘이 최적의 해를 보장하는지 확인.

▷ 예시 : 거스름 돈 문제
- 카운터에 500원, 100원, 50원, 10원짜리가 무수히 많은 경우
- 손님에게 6,480원을 거슬러 줄 경우 동전 개수의 최솟값은?

※ 해결방법 : 가장 큰 화폐부터 거슬러 주는 것.

▷ 거스름 돈 문제의 해법 정당성 분석
- 단순히 큰 화폐부터 선택했을 때 최적의 해를 찾을 수 있는 이유는?
- 그 이유는, 각 화폐단위가 배수 관계에 있기 때문이다.

※ 120원을 거슬러 주어야 하는데, 80원, 60원, 10원 동전이라면?
- 최적 해 : 60원 × 2 = 120원, 2개 필요
- 80원부터 준다면, 10원이 4개가 필요하게 되어 총 5개가 필요함

2. 동전 0 문제

- 문제
준규가 가지고 있는 동전은 총 N종류이고, 
각각의 동전을 매우 많이 가지고 있다.

동전을 적절히 사용해서 그 가치의 합을 K로 만들려고 한다. 
이때 필요한 동전 개수의 최솟값을 구하는 프로그램을 작성하시오.

- 입력
첫째 줄에 N과 K가 주어진다. (1 ≤ N ≤ 10, 1 ≤ K ≤ 100,000,000)
둘째 줄부터 N개의 줄에 동전의 가치 Ai가 오름차순으로 주어진다. 
(1 ≤ Ai ≤ 1,000,000, A1 = 1, i ≥ 2인 경우에 Ai는 Ai-1의 배수)

- 출력
첫째 줄에 K원을 만드는데 필요한 동전 개수의 최솟값을 출력한다.

- 예제 입력 1 
10 4200
1
5
10
50
100
500
1000
5000
10000
50000

- 예제 출력 1 
6

------------------------------------------------------------------
let fs = require('fs');
let input = fs.readFileSync('05_01_greedy_01.txt').toString().split('\n');

let n = Number(input[0].split(' ')[0]);  // 동전개수
let k = Number(input[0].split(' ')[1]);  // 만들 금액

let arr = [];
// 전체 동전 데이터 입력
for(let i=1; i<=n; i++){
    arr.push(Number(input[i]));
}
let cnt = 0;
for(let i = n-1; i>=0; i--){
    cnt += parseInt(k / arr[i]); // 해당동전 몇개 사용?
    k %= arr[i]; // 주고 남은 금액
}

console.log(cnt);
------------------------------------------------------------------    