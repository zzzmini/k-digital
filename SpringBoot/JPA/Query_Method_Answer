    Repository

    //문제 1. 여성의 이름 중 "w"또는 "m"을 포함하는 자료를 검색하시오.
    List<Users> findByNameLikeOrNameLike(String str1, String str2);
    List<Users> findByNameLikeAndGenderOrNameLikeAndGender
            (String name1, Gender gender1, String name2, Gender gender2);

      @Test
    void 문제1(){
        List<Users> usersList = usersRepository
                .findByNameLikeOrNameLike("%w%", "%m%");
        for (Users user : usersList) {
            if (user.getGender().equals(Gender.Female)) {
                System.out.println(user);
            }
        }
        // 두번째 방법
        usersRepository.findByNameLikeAndGenderOrNameLikeAndGender(
                "%w%", Gender.Female, "%m%", Gender.Female
        ).forEach(users -> System.out.println(users));
    }

    //문제 2. 이메일에 net을 포함하는 데이터 건수를 출력하시오.
    List<Users> findByEmailLike(String email);

    //문제 2. 이메일에 net을 포함하는 데이터 건수를 출력하시오.
    @Test
    void 문제2(){
        System.out.println("Count = " +
                usersRepository.findByEmailLike("%net%").stream().count());
    }

    //문제 3. 가장 최근 한달이내에 업데이트된 자료 중 이름 첫자가 "J"인 자료를 출력하시오.
    List<Users> findByUpdatedAtGreaterThanEqualAndNameLike(LocalDateTime date, String name);

   // 문제 3. 가장 최근 한달이내에 업데이트된 자료 중 이름 첫자가 "J"인 자료를 출력하시오.

    @Test
    void 문제3(){
        //기준일
        LocalDate baseDate = LocalDate.now()
                .minusMonths(1L)
                .plusDays(1L);
        //시작일
        LocalDateTime date = baseDate.atTime(0,0,0);

        usersRepository
                .findByUpdatedAtGreaterThanEqualAndNameLike(date, "E%")
                .forEach(users -> System.out.println(users));
    }

    //문제 4. 가장 최근 생성된 자료 10건을 ID, 이름, 성별, 생성일 만 출력하시오.
    List<Users> findTop10ByOrderByCreatedAtDesc();

    //문제 4. 가장 최근 생성된 자료 10건을 ID, 이름, 성별, 생성일 만 출력하시오.
    @Test
    void 문제4(){
        List<Users> users = usersRepository.findTop10ByOrderByCreatedAtDesc();
        for (Users user : users) {
            System.out.println("ID = " + user.getId() +
                    " , Name = " + user.getName() +
                    " , Gender = " + user.getGender() +
                    " , CreatedAt = " + user.getCreatedAt()
            );
        }
    }

    //문제 5. "Red"를 좋아하는 남성 이메일 계정 중 사이트를 제외한 계정만 출력하시오.
    List<Users> findByLikeColorAndGender(String color, Gender gender);

    //문제 5. "Red"를 좋아하는 남성 이메일 계정 중 사이트를 제외한 계정만 출력하시오.
    @Test
    void 문제5(){
        List<Users> users = usersRepository.findByGenderAndLikeColor(Gender.Male, "Red");
        for (Users user : users) {
            String email = user.getEmail();
            String account = email.substring(0, email.indexOf("@"));
            System.out.println( "email : " + email +  ", email Account : " + account);
        }
    }

    //문제 6. 갱신일이 생성일 이전인 잘못된 데이터를 출력하시오.
    // 전체 가져오기

    //문제 6. 갱신일이 생성일 이전인 잘못된 데이터를 출력하시오.
    @Test
    void 문제6(){
        List<Users> users = usersRepository.findAll();
        for (Users user : users) {
            if (user.getUpdatedAt().isBefore(user.getCreatedAt())) {
                System.out.println(user);
            }
        }
    }

    //문제 7. 이메일에 edu를 갖는 여성 데이터를 가장 최근 데이터부터 보이도록 출력하시오.
    List<Users> findByEmailLikeAndGenderOrderByCreatedAtDesc(String email, Gender gender);

    //문제 7. 이메일에 edu를 갖는 여성 데이터를 가장 최근 데이터부터 보이도록 출력하시오.
    @Test
    void 문제7(){
        usersRepository
                .findByEmailLikeAndGenderOrderByCreatedAtDesc("%edu%", Gender.Female)
                .forEach(users -> System.out.println(users));
    }

    //문제 8. 좋아하는 색상 별로 오름차순 정렬하고 같은 색상 데이터는 이름의 내림차순으로 출력하시오.
    @Test
    void 문제8(){
        usersRepository.findAll(
                Sort.by(Sort.Order.asc("likeColor"),
                        Sort.Order.desc("name"))
        ).forEach(users -> System.out.println(users));
    }

    // 문제 9. 전체 자료를 가장 최근 입력한 자료 순으로 정렬 및 페이징 처리하고 한 페이지당 10건씩 출력하되,
    // 그 중 1번째 페이지를 출력하시오.
    @Test
    void 문제9() {
        usersRepository.findAll(
                PageRequest.of(0, 10, Sort.by(Sort.Order.desc("createdAt")))
        ).getContent()
                .forEach(users -> System.out.println(users));
    }

    // 10번. 남성 자료를 ID의 내림차순으로 정렬한 후 한페이당 3건을 출력하되 그 중 2번째 페이지 자료를  출력하시오.
    Page<Users> findByGenderOrderByIdDesc(Gender gender, Pageable pageable);

    // 문제10. 남성 자료를 ID의 내림차순으로 정렬한 후 한페이당 3건을 출력하되 그 중 2번째 페이지 자료를  출력하시오.
    @Test
    void 문제10(){
        Pageable pageable = PageRequest.of(1, 3);
        Page<Users> result = usersRepository.findByGenderOrderByIdDesc(Gender.Male, pageable );
        result.getContent().forEach(users -> System.out.println(users));
    }

    // 문제11. 지난달의 모든 자료를 검색하여 출력하시오.
    List<Users> findByCreatedAtBetween(LocalDateTime startDate, LocalDateTime lastDate);

    // 문제11. 지난달의 모든 자료를 검색하여 출력하시오.
    @Test
    void 문제11(){
        //기준일
        LocalDate baseDate = LocalDate.now().minusMonths(1L);
        //시작일
        LocalDateTime startDate = baseDate.withDayOfMonth(1).atTime(0,0,0);
        //종료일
        LocalDateTime lastDate = baseDate
                .withDayOfMonth(baseDate.lengthOfMonth()).atTime(23,59,59);
        //검색
        System.out.println("startDate = " + startDate + ", lastDate = " + lastDate);
        usersRepository.findByCreatedAtBetween(startDate, lastDate)
                .forEach(users -> System.out.println(users));
    }



 








