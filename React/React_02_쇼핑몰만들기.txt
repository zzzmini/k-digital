warning message 제거하기

app.js 맨 위 상단에

/* eslint-disable */ 넣어주기

1. 프로젝트 생성하기 
ⓐ 폴더 생성 후 shift + 마우스 우클릭 -> 여기에 powershell 창 열기
  > npx create-react-app shop
ⓑ 생성 안될 시 - 파워쉘을 관리자 모드로 열기
  > Set-ExecutionPolicy Unrestricted
 
ⓒ vs-code 열어서 생성된 shop 폴더 열기 
ⓓ 터미널 열고 npm start 입력
  >> http://localhost:3000/

2. Bootstrap 사용하기
ⓐ app.js 파일 열고 <div> 하나 남기고 지우기
function App() {
  return (
    <div className="App">
      
    </div>
  );
}
ⓑ Bootstrap 라이브러리 추가하기
- 구글 : react bootstrap 검색
ⓒ Get started
npm install react-bootstrap bootstrap

ⓓ Stylesheets 처리하기
-- App.js
import 'bootstrap/dist/css/bootstrap.min.css';

또는

-- index.html 의 head 태그 안에다 붙여넣기

<link
  rel="stylesheet"
  href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
  integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN"
  crossorigin="anonymous"
/>

ⓔ 버튼 삽입하고 테스트 하기

- 상단 검색(돋보기) 누르고 button 입력

※ Components를 삽입하여 사용할 때는 import 해야 한다.

Examples
Use any of the available button style types to quickly create a styled button. Just modify the variant prop.

==========================================
LIVE EDITOR 아래 보면

sample 있음.

import Button from 'react-bootstrap/Button';

function App() {
  return (
    <div className="App">
      <Button variant="primary">Primary</Button>
    </div>
  );
}

==========================================

ⓕ Navbar 추가해 보기
- navbar 검색 후 검정바탕 흰글씨 navbar 찾아서 추가해 보기

==========================================
import Container from 'react-bootstrap/Container';
import Nav from 'react-bootstrap/Nav';
import Navbar from 'react-bootstrap/Navbar';

function App() {
  return (
    <div className="App">
      <Navbar bg="dark" data-bs-theme="dark">
        <Container>
          <Navbar.Brand href="#home">ShoeShop</Navbar.Brand>
          <Nav className="me-auto">
            <Nav.Link href="#home">Home</Nav.Link>
            <Nav.Link href="#cart">Cart</Nav.Link>
          </Nav>
        </Container>
      </Navbar>
      <br />
      <Button variant="primary">Primary</Button>
    </div>
  );
}
==========================================

3. 이미지 넣는 법과 public 폴더 이용하기

------------------------------------------------------------------------------
  
				대문사진

------------------------------------------------------------------------------

	상품1				상품2				상품3

------------------------------------------------------------------------------

ⓐ 사진 넣고 css 작성하기
※ 이미지 넣고 준비히기
-> public 폴더 밑에 images 폴더 만들고
-> 예제 이미지 파일 붙여넣기

================================
App.js 
================================
</Navbar>
      <div className="main-bg"></div>
    </div>
================================

================================
app.css 
================================

.main-bg {
  height: 300px;
  background-image: url('./images/bg.jpg');
  background-size: cover;
  background-position: center;
}

================================

ⓑ html 파일에서 배경이미지 넣기

-- 맨위에서 이미지 import 하기

import bg_img from './images/bg.jpg';

================================
※ 자바스크립트 문자열 연결 방식으로 사용
<div className="main-bg" 
        style={{backgroundImage : 'url(' + bg_img + ')'}}></div>
</div>
================================

================================
※ 자바스크립트 템플릿 리터럴 방식으로 사용
<div className="main-bg" 
        style={{backgroundImage : `url(${bg_img})`}}></div>
 </div>

▶ public > images > bg.jpg
================================


ⓒ 상품목록 만들기(가로로 세개 나란히 진열하기)

※ Bootstrap에서 grid 으로 검색하면 Responsive grids 나옴

가로 세개짜리 복붙함.

<Container>
      <Row>
        <Col>1 of 2</Col>
        <Col>2 of 2</Col>
      </Row>
      <Row>
        <Col>1 of 3</Col>
        <Col>2 of 3</Col>
        <Col>3 of 3</Col>
      </Row>
</Container>

※ 필요한 것은 import 함.

ⓓ html 내에서 직접 이미지를 넣을 때

================================
	import img_2 from './images/shoes2.jpg';

      <Container>
      <Row>
        <Col>
          <img src='https://zzzmini.github.io/images/shoes1.jpg' width='80%'/>
		▶ 깃헙배포 리포지토리 > shoes1.jpg
          <h4>상품명</h4>
          <p>상품설명</p>
        </Col>
        <Col>
          <img src={img_2} width='80%'/>
		▶ src > images > shoes2.jpg  . . . .  import 함
          <h4>상품명</h4>
          <p>상품설명</p>
        </Col>
        <Col>
          <img src={process.env.PUBLIC_URL + './images/shoes3.jpg'} width='80%'/>
		▶ public > images > shoes3.jpg 
          <h4>상품명</h4>
          <p>상품설명</p>
        </Col>
      </Row>
      </Container>
================================

※ {process.env.PUBLIC_URL 은 추후 배포할 때 
    https://zzzmini.com/shoes/ 여기 서브폴더에 배포할 경우 참조 퍼블릭 폴더가
    바뀌게 되어 이미지를 가져올 수 없다.
    상대적으로 현재 배포되는 곳을 public 폴더 루트로 지정해 주는 방법이다.

▶ 경로와 파일의 위치 관계는 tag가 url 인가 혹은 src 인가에 따라 위치가 가변함.
    url은 public 기준, src는 src 폴더 기준.

4. import와 export 이용하기
================================
[
  {
    id : 0,
    title : "White and Black",
    content : "Born in France",
    price : 120000
  },

  {
    id : 1,
    title : "Red Knit",
    content : "Born in Seoul",
    price : 110000
  },

  {
    id : 2,
    title : "Grey Yordan",
    content : "Born in the States",
    price : 130000
  }
] 
================================

ⓐ export와 import 연습하기

▶ 한개 변수 리턴하기

> src -> data.js 파일 만들기
================================
let a = 10;

export default a;
================================

> App.js 파일에서 import 하고 state로 사용하기

================================
import myData from './data.js';
import { useState } from 'react';

      <div>
        { myData }
      </div>
================================

▶ 여러 개 변수 리턴하기

> src -> data.js 파일 만들기
================================
let a = 10;
let b = 100;
export {a , b}; 
================================

> 여러개 변수명 가져올 때는 사용처에서도 동일한 이름 사용해야 한다.
================================
import {a, b} from './data.js';
      <div>
        { a } {b}
      </div>
================================


ⓑ 상품 데이터를 js 파일로 저장하고 불러오기
================================
data.js
================================
export default
[
    {
      id : 0,
      title : "White and Black",
      content : "Born in France",
      price : 120000
    },
  ........................

================================
App
================================

import data from './data.js';
import { useState } from 'react';

function App() {

  let [product, setProduct] = useState(data);

      <Container>
      <Row>
        <Col>
          <img src='https://zzzmini.github.io/images/shoes1.jpg' width='80%'/>
          <h4>{product[0].title}</h4>
          <p>{product[0].content}</p>
        </Col>
        <Col>
          <img src={img_2} width='80%'/>
          <h4>{product[1].title}</h4>
          <p>{product[1].content}</p>
        </Col>
        <Col>
          <img src={process.env.PUBLIC_URL + './images/shoes3.jpg'} width='80%'/>
          <h4>{product[2].title}</h4>
          <p>{product[2].content}</p>
        </Col>
      </Row>
      </Container>

================================
[문제 1] 상품옥록을 컴포넌트로 바꾸기
================================
[문제 2] 상품내용 데이터 바인딩 하기
================================
[문제 3] 반복문으로 처리하기
================================

      <Container>
      <Row xs={3}>
        {
          product.map((shoes, index) => {
            return(
              <Col>
                <Product shoes={shoes} index={index} />
              </Col>
            );
          })
        }
        </Row>
      </Container>


function Product(props){
  let newIndex = props.index + 1;
  let image = './images/shoes' + newIndex + '.jpg';
  return (
    <div>
        <img src={process.env.PUBLIC_URL + image} width='80%'/>
        {/* <h4>{props.product[props.index].title}</h4>
        <p>{props.product[props.index].content}</p> */}
        <h4>{props.shoes.title}</h4>
        <p>{props.shoes.content}</p>
    </div>
  );
}
================================


5. 리액트 라우터_01

-- 상세페이지 및 장바구니 페이지 등 만들기
-- https://vibe.naver.com/ 에서 페이지 움직임 확인하기
-- url 마다 페이지를 구분함.
ⓐ 우리 페이지 구성
- /detail : 상세페이지 보여주기
- /cart : 장바구니 페이지 보여주기

※ 리액트는 SPA(Single Page Application)이라 index.html 만
   사용 함.
   그래서 해당 페이지를 보여 줄 컴포넌트를 미리 만들어 놓고
  /detail 로 접속하면 해당 컴포넌트를 보여주는 방식을 취함.

※ 이 때 사용하는 것이 react-router-dom 를 사용함.

ⓑ 터미널에서  react-router-dom 설치하기
> npm install react-router-dom@6

ⓒ 설치 후 추가 세팅하기
================================
index.js

import { BrowserRouter } from 'react-router-dom';

root.render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </React.StrictMode>
);

※ BrowserRouter import 하고 <App />을 감싸면 끝
================================
 
ⓓ router 라이브러리 가져오고, 라우터 만들기

================================
App.js
// 필요한 컴포넌트를 react-reuter-dom 에서 가져오기
import { Routes, Route, Link } from 'react-router-dom';

    <div className="App">

      <Routes>
	<Route path='/' 
            element={
              <div>메인페이지 입니다.</div>
            }/>

        <Route path='/detail' 
            element={
              <div>상세페이지 입니다.</div>
            }/>
        <Route path='/cart' 
            element={
              <div>장바구니페이지 입니다.</div>
            }/>
      </Routes>
      ........
================================

ⓔ 페이지 처리하기

-- 상태에 따라 nav 밑에 해당 라우트 된 페이지를 보여줌.

▶ main 페이지를 

	<Route path='/' 
            element={
              <div>
		=========
		요기다 집어 넣음.
		=========
	      </div>
            }/>

※ 메인페이지를 컴포넌트로 만들어서 심플하게 처리 함.

ⓕ Link 를 이용해서 페이지 이동시키기

================================
      </Navbar>

      <Link to="/">홈으로</Link> &nbsp;
      <Link to="/detail">상세페이지</Link>

      <Routes>

================================

================================
[문제] 상세페이지 컴포넌트로 만들어서 라우트에 추가하기

<div className="container">
  <div className="row">
    <div className="col-md-6">
      <img src="https://zzzmini.github.io/images/shoes1.jpg" width="100%" />
    </div>
    <div className="col-md-6">
      <h4 className="pt-5">상품명</h4>
      <p>상품설명</p>
      <p>120000원</p>
      <button className="btn btn-danger">주문하기</button> 
    </div>
  </div>
</div> 

================================
위 내용을 컴포넌트로 만들고 처리하기

① Detail.js 파일로 만들기
================================
./routes/Detail.js
================================
function Detail(){
  return(
    <div className="container">
      <div className="row">
        <div className="col-md-6">
          <img src="https://zzzmini.github.io/images/shoes1.jpg" width="100%" />
        </div>
        <div className="col-md-6">
          <h4 className="pt-5">상품명</h4>
          <p>상품설명</p>
          <p>120000원</p>
          <button className="btn btn-danger">주문하기</button> 
        </div>
      </div>
    </div> 
  );
}
 export default Detail;

================================
App.js
================================
import Detail from './routes/Detail.js';

        <Route path='/detail' 
            element={
              <div>
                <Detail />
              </div>
            }/>
        <Route path='/cart' 
            element={
              <div>장바구니페이지 입니다.</div>
            }/>
      </Routes>

================================

6. 리액트 라우터_02 -- navigate, nested routes, outlet

※ 필요한 라이브러리 import 하기

import { Routes, Route, Link, useNavigate, Outlet } from 'react-router-dom';

ⓐ useNavigate
   let navigate = useNavigate(); 
   - 이 안에는 페이지 이동을 도와주는 함수가 하나 들어있음.
   - 링크 안생기고.. 기존 css를 망가뜨리지 않음.
   - 기존 네비게이션 바 수정하기
================================
      <Navbar bg="dark" data-bs-theme="dark">
        <Container>
          <Navbar.Brand href="#home">ShoeShop</Navbar.Brand>
          <Nav className="me-auto">
            <Nav.Link href="#home" onClick={
              ()=> {
                navigate('/')
              }
            }>Home</Nav.Link>
            <Nav.Link href="#detail" onClick={
              () => {
                navigate('/detail')
              }
            }>Detail</Nav.Link>
          </Nav>
        </Container>
      </Navbar>
================================
▷ 앞으로 가기 : navigate(1)
▷ 뒤로 가기 : navigate(-1)
================================
▷ 404 page 만들기

<Route path='*' element={
              <div>
                Page Not Found 404 Error
              </div>
            }/>

※ 라우트 설정 맨 아래에 적어둔다.
================================

ⓑ nested routes
- /about : 회사 정보페이지
- /about/member : 직원정보페이지
- /about/location : 지도 페이지 보이기

▷ 회사정보페이지 만들고 처리하기
================================

function About(){
  return (
    <div>
        <h4>우리 회사는 요.....</h4>
    </div>
  );
}

<Route path='/about' element={<About />}/>

================================
▷  nested routes 로 구현하기
================================
        <Route path='/about' element={<About />}>
          <Route path='member' element={<div>Member</div>} />
          <Route path='location' element={<div>Location</div>} />
        </Route>
================================
※ nested routes의 특징은 제일 상위의 element도 보여주고
nested 된 element도 보여준다.

근데 실행하면, 안보임...

About Component에서 중첩된 컴포넌트기 보일 위치를 잡아줘야 함.

ⓒ outlet : 중첩된 엘리먼트 위치를 구멍을 뚫어 놓는다.
================================
function About(){
  return (
    <div>
        <h4>우리 회사는 요.....</h4>
        <Outlet></Outlet>
    </div>
  );
}
================================

※ nested route는 특정 페이지간 작은 변화를 갖고 있는 페이지
처리에 유용함.

================================
[문제] 다음 조건대로 처리하기

▼ /event/one 페이지로 접속 

		오늘의 이벤트
	첫 주문시 양배추즙 서비스

▼ /event/two 페이지로 접속하면  

		오늘의 이벤트
	     생일기념 쿠폰받기


function Event(){
  return(
    <div>
      <h3>오늘의 이벤트</h3>
      <Outlet></Outlet>
    </div>
  );
}

        <Route path='/event' element={<Event />}>
          <Route path='one' 
			element={<div>첫 주문시 양배추즙 서비스</div>} />
          <Route path='two' 
			element={<div>생일기념 쿠폰받기</div>} />
        </Route>

================================

7. 리액트 라우터_03 -- URL 파라메터 사용하기(PathVariable)

ⓐ Detail 페이지에 상품정보 props로 넘기기
================================
        <Route path='/detail' 
            element={
              <div>
                <Detail product={product}/>
              </div>
            }/>
================================

ⓑ Detail.js 에서 props 받아 첫번째 상품정보 뿌리기
================================
function Detail(props){
    return(
      <div className="container">
        <div className="row">
          <div className="col-md-6">
            <img src="https://zzzmini.github.io/images/shoes1.jpg" width="100%" />
          </div>
          <div className="col-md-6">
            <h4 className="pt-5">{props.product[0].title}</h4>
            <p>{props.product[0].content}</p>
            <p>{props.product[0].price}원</p>
            <button className="btn btn-danger">주문하기</button> 
          </div>
        </div>
      </div> 
    );
  }
  
  export default Detail;
================================

ⓒ PathVariable 로 url 전달하기

 /detail/1
 /detail/2
 /detail/2

================================
App.js

        <Route path='/detail/:id' 
            element={
              <div>
                <Detail product={product}/>
              </div>
            }/>

================================

================================
Detail.js

import { useParams } from 'react-router-dom';

function Detail(props){
  let {id} = useParams();
  console.log(id);
    return(
      <div className="container">
        <div className="row">
          <div className="col-md-6">
            <img alt="신발" src="https://zzzmini.github.io/images/shoes1.jpg" width="100%" />
          </div>
          <div className="col-md-6">
            <h4 className="pt-5">{props.product[id].title}</h4>
            <p>{props.product[id].content}</p>
            <p>{props.product[id].price}원</p>
            <button className="btn btn-danger">주문하기</button> 
          </div>
        </div>
      </div> 
    );
  }
  
  export default Detail;


================================

================================
[문제] 상품이 정렬된 이후에도 제대로 상품 선택되게 만들기
   또 하나 잘못된 url 요청 시 처리하기
================================
/* eslint no-restricted-globals: ["off"] */

import { useParams } from 'react-router-dom';

function Detail(props){

  // find() Test
  let data = ['apple', 'mango', 'banana'];
  let result = data.find(function(x){
    return x == 'mango';
  });
  console.log(result);


  let {id} = useParams();
  let findProduct = props.product.find(function(x){
      return x.id == id;
  });

  if(findProduct == null){
    alert('찾는 상품이 없습니다.');
    history.back();
    return;
  }

  console.log(id);
    return(
      <div className="container">
        <div className="row">
          <div className="col-md-6">
            <img alt="신발" src="https://zzzmini.github.io/images/shoes1.jpg" width="100%" />
          </div>
          <div className="col-md-6">
            <h4 className="pt-5">{findProduct.title}</h4>
            <p>{findProduct.content}</p>
            <p>{findProduct.price.toLocaleString()}원</p>
            <button className="btn btn-danger">주문하기</button> 
          </div>
        </div>
      </div> 
    );
  }
  
  export default Detail;================================

8. styled-components
ⓐ styled-components 설치하기
> npm install styled-components

ⓑ Details.js 에서 테스트 해 보기
================================
import styled from 'styled-components';

import styled from "styled-components";

let YellowBtn = styled.button`
  background: yellow;
  color: black;
  padding: 10px;
`;

let BlackBox = styled.div`
  background: gray;
  padding: 20px;
`;


  return (
    <div className="container">
      <BlackBox>
        <YellowBtn>버튼</YellowBtn>
      </BlackBox>

      <div className="row">

================================
※ 용도 : css를 별도로 사용하지 않고 js 파일 내에서
간편하게 css를 적용하고 싶을 때 사용하는 라이브러리

※ App.js 파일에 적용한 css 는 모든 파일에 오염되어 반영된다.
 빌드하면 하나로 만들어 관리하기 때문에...
 그래서, 타 파일에 오염되지 않고 해당 js 파일에먼 적용되는 
  css 를 만들기 위해서는 
  component-name.module.css
  로 파일명을 주어 만들어야 한다.

  그런 의미로 볼 때 styled-component 를 사용하는 의미가 있다.

ⓒ 갑자기 파랑색 버튼이 필요하다면?

>> 스타일 적용된 컴포넌트 개념이기에 props 처럼 전달해서 
수정하여 쓴다.
>> 조건 지정도 가능하다.

================================

let YellowBtn = styled.button`
  background: ${props => props.bg};
  color: ${ props => props.bg == 'blue' ? 'white':'black'};
  padding: 10px;
`;

  return (
    <div className="container">
      <BlackBox>
        <YellowBtn bg='blue'>버튼</YellowBtn>
      </BlackBox>

      <div className="row">

================================

※ 도입여부는 고민해야 함.  여러가지 불편한 점도 많음
- 일반 컴포넌트와 구분이 안된다.
- 다른 컴포넌트에서 사용할 경우 import, export해야 하는데
  기존 css 와 차잇점이 없다.
- 지정분해 진다.

9. lifecycle과 useEffect_01

================================
문제. 이미지를 클릭하면 상세페이지로 이동하게 만들기

App.js

function Product(props) {
  let newIndex = props.index + 1;
  let image = "./images/shoes" + newIndex + ".jpg";
  let navigate = useNavigate();
  return (
    <div>
      <img src={process.env.PUBLIC_URL + image} width="80%" 
        onClick={() => { navigate(`/detail/${props.index}`) } } />
      {/* <h4>{props.product[props.index].title}</h4>
        <p>{props.product[props.index].content}</p> */}
      <h4>{props.shoes.title}</h4>
      <p>{props.shoes.content}</p>
    </div>
  );
}
================================
Detail.js -> 이미지 처리하기

      <div className="row">
        <div className="col-md-6">
          <img
            alt="신발"
            src={process.env.PUBLIC_URL +`../images/shoes${Number(id)+1}.jpg`}
            width="100%"
          />
        </div>
================================

10. lifecycle과 useEffect_01

※ LifeCycle
- 컴포넌트가 로드될 때 : mount
- state 조작 : update
- 다시 되돌아 갈 때 : unmount

라이프 사이클을 통해 값을 초기화 또는 특정 코드를 실행하게
하기 위해 어느 시점에서 끼어들것인가를 고민하고 처리함.

ⓐ useEffect 사용해 보기
================================
Detail.js 에서 테스트

import { useEffect } from "react";

function Detail(props) {
  useEffect(()=>{
    console.log('안녕 난 useEffect Mounted!!')
  });
.................
================================

console : 안녕 난 useEffect Mounted!!

================================

※ 두 번 찍히는 이유는 디버깅때문에 그럼.
  실제 발행을 하면 한번만 처리 됨..
--> 해결방법 : index.html 내의 <React.StrictMode> 없애면 가능

ⓑ update Cycle 확인
-- state 변경을 통해서 재랜더링 될 때 update 실행 됨.

================================
Test : state 만들고 버튼 누르면 1 증가 처리

import { useState } from "react";

let [count, setCount] = useState(0);

  return (
    <div className="container">
      {count}
      <button onClick={()=>{setCount(count+1)}}>버튼</button>

      <BlackBox>
	.............
================================

▷ state 가 변경될 때 마다 update hook이 걸림
▷ useEffect(()=>{
    console.log('안녕 난 useEffect Mounted!!')
  });

의
 console.log('안녕 난 useEffect Mounted!!')
를 밖으로 빼도 실행됨!!!!

ⓒ 언제 사용하는가?
첫째, useEffect()는 페이지 랜더링이 완료 된 후에 실행 된다.
둘째, 약간의 동기 개념이 포함.
 
     for(let i = 0; i < 10000; i++){
	console.log(i);
     }
    
    위 코드를 useEffect에 넣어서 실행, 밖에서 실행해 보면
    근소한 차이를 확인할 수 있다.    

셋째, 어려운 연산, 서버에서 데이터 가져올 때, 타이머 작업 등
넷째, 부가적인 기능을 넣어서 사용 --- sideEffect와 같은 처리..

================================
문제 

  return (
    <div className="container">
      <div className="alert alert-warning">
        2초 이내 구매시 할인
      </div>

위 div 태그를 페이지 랜더링 이후 2초 있다가 사라지도록 처리

첫째, Discount.js 파일 작성

function Discount(){
    return(
      <div className="alert alert-warning">
      2초 이내 구매시 할인
    </div>
    );
  }
export default Discount;  

둘째, Detail.js에서 import

import Discount from "../routes/Discount.js";

셋째, 보일지 말지 state 설정

let [alert, setAlert] = useState(true);

넷째, 2초 후 alert 값을 false 로 바꿈.

  useEffect(()=>{
    setTimeout(function(){
      setAlert(false);
    }, 2000
  )});

다섯째, state 값에 따라 처리되도록 삼항연산코딩

  return (
    <div className="container">
      {
        alert == true ?
          <Discount /> : null
      }

================================

11. lifecycle과 useEffect_02

ⓐ useEffect 좀 더 정확히 사용하기
================================
  useEffect(()=>{
    setTimeout(function(){
      setAlert(false);
    }, 2000)});
================================
※ 수정된 코드
================================
  useEffect(()=>{
    setTimeout(function(){
      setAlert(false);
      console.log(1);
    }, 2000), [ count ] });

▶ count 가 바뀔 때 만 useEffect 실행
   [] 안의 내용을 dependency라고 함.

▶ [ ] 안이 비어 있으면 mount 될 때 1회만 실행
▶ [ ] 안에 state 값이 있거나 아예 없으면
    update, mount 될 때마다 실행

▶ useEffect 실행 되기 전에 실행될 코드 기술하는 곳

  useEffect(()=>{
    let myTimer = setTimeout(() => {setAlert(false)}, 2000)
    return () => {
      console.log("before useEffect");
    }
  }, [count]);

※ 위 코드 실행순서
Ⅰ. console.log("before useEffect"); 
 --> cleanup function() 즉, 초기화
 ---> 기존 타이머 제거 등...
 ---> 타이머 지우는 코드
   return () => {
      clearTimeout(myTimer);
    }
 ---> 기존 서버에 데이터 요청 시 문제 발생 요지를 없애고자
      기존 요청 제거 등에도 쓰임.
 ----> unmounted 될 때도 실행됨.

Ⅱ. 2초 후 : Discount 사라짐
Ⅲ. count 변경 시 마다 실행 됨. --> useEffect 내 코드가

================================
정리.
Ⅰ. 재 랜더링 때마다 실행 : useEffect( ( )=> { } )
Ⅱ. mount 시 1회 실행 : useEffect( ( )=> { }, [ ] )
Ⅲ. unmount 시 1회 실행 : 
	useEffect( ( )=> {
		return ( ) => {
		 }
		}, [ ] )

================================

================================
문제 : 신발 밑에 input 상자 만들고 숫자말고 다른거
입력들어오면 input 위에 "경고 : 숫자만 입력" 창을
띄우게 하기.

  let [inputData, setInputdata] = useState('');
  let [state, setState] = useState(true);

  useEffect(()=> {
      if(isNaN(inputData)) setState(false);
      else setState(true);
  }, [inputData])

        {
          state == false ? <div>숫자만 입력</div> : null
        }

        <div>
          <input type="text" style={{borderColor : "red"}}
            onChange={(e)=>{setInputdata(e.target.value)}}></input>
            <br></br>
            {inputData}
        </div>
================================


12. Ajax 이용해서 서버와 통신하기

ⓐ App.js 제품 리스트 하단에 상품더보기 버튼 만들기
================================
      <div>
        <button onClick={()=>{
          
        }}>데이터가져오기</button>
      </div>
================================

ⓑ https://zzzmini.github.io/js/react_data.json 
================================
  [
  {
    "id": 3,
    "title": "Flowey",
    "content": "only 5 inches",
    "price": 120000
  },
  {
    "id": 4,
    "title": "Baby shoes",
    "content": "for less than 6",
    "price": 110000
  },
  {
    "id": 5,
    "title": "Red Herring",
    "content": "Born in Brazil",
    "price": 197000
  }
]
================================

ⓒ ajax 로 데이터 추가 요청하기

- XMLHttpRequest
- fetch()
- axios

▷ axios 설치하기
>> npm install axios

안되면....

>> npm install yarn
>> yarn add axios

※ App.js
================================

import axios from 'axios';

        <button onClick={()=>{
          axios.get('https://zzzmini.github.io/js/react_data.json')
          .then((result)=>{
            console.log(result.data)
            // let temp = [... product, ... result.data];
            let temp = [... product]
            for(let x of result.data){
              temp.push(x);
              console.log(x)
            }
            setProduct(temp);
          })
          .catch(()=>{
            console.log("실패함");
          })
        }}>데이터가져오기</button>

================================
※ 추가 자료
data3.json
[
  {
    "id" : 6,
    "title" : "Sijang",
    "content" : "from Dongmyo station",
    "price" : 120000
  },
  {
    "id" : 7,
    "title" : "Tag gari",
    "content" : "ali and taobao",
    "price" : 120000
  },
  {
    "id" : 8,
    "title" : "Flyer",
    "content" : "Refund not available",
    "price" : 120000
  }
]

================================
================================
문제. 버튼을 한번 누르면 3개 가져오고,
  다시한번 누르면 세개를 추가로 더 가져오도록,
  상품이 존재하지 않은 경우 상품이 더 없다고
  알려주기
================================

  let [dataLodingCount, setDataLodingCount] = useState(0);

          let getUrl = '';
          if(dataLodingCount == 0) {
            getUrl = 'https://zzzmini.github.io/js
					/react_data_01.json';
            setDataLodingCount(dataLodingCount + 1);
            setLoadingState(true);
          } else if(dataLodingCount == 1){
            getUrl = 'https://zzzmini.github.io/js
					/react_data_02.json';
            setDataLodingCount(dataLodingCount + 1);
            setLoadingState(true);
          } else {
            alert("데이터가 존재하지 않습니다.");
            return;
          }

================================
문제. 버튼을 누른 후 데이터 로딩 시작되면
  "로딩 중입니다" 글자 띄우기
================================
  let [loadingState, setLoadingState] = useState(false);

      <div>
        {
          loadingState == true ? <div>Loading .... Please wait ! </div> : null
        }
        <button onClick={()=>{
          let getUrl = '';
          if(dataLodingCount == 0) {
            getUrl = 'https://zzzmini.github.io/js/react_data_01.json';
            setDataLodingCount(dataLodingCount + 1);
            setLoadingState(true);
          } else if(dataLodingCount == 1){
            getUrl = 'https://zzzmini.github.io/js/react_data_02.json';
            setDataLodingCount(dataLodingCount + 1);
            setLoadingState(true);
          } else {
            alert("데이터가 존재하지 않습니다.");
            return;
          }

          axios.get(getUrl)
          .then((result)=>{
            console.log(result.data)
            // let temp = [... product, ... result.data];
            let temp = [... product]
            for(let x of result.data){
              temp.push(x);
              console.log(x)
            }
            setProduct(temp);
            setLoadingState(false);
          })
          .catch(()=>{
            console.log("실패함");
            setLoadingState(false);
          })
        }}>데이터가져오기</button>

================================

ⓓ 서버로 데이터 전달하기(POST 요청)

================================
Ⅰ. 한곳에 보낼 때
  axios.post('/어쩌구/rul', {name : 'kim'})

Ⅱ. 여러곳에 보낼 때
  Promise.all( [ axios.get('/url_01'), axios.get('/url_02') ] )
   .then  → 두 개 요청 모두 성공했을 때 실행

Ⅲ. fetch 사용 시 : 얘는 기본 자바스크립트 문법

  fetch('http://url....')
  .then(결과 => 결과.json())
  .then(data => { })
  인위적으로 변환해야 한다.
================================

13. 리액트에서 탭 UI 만들기

ⓐ 상세페이지 모양 잡기

    image                 infomation
  -----------------------------------
    버튼1 |  버튼2 | 버튼3 |
  -----------------------------------
     각 버튼 클릭 시 보일 내용


ⓑ 동적 UI 만들기(디자인) - 버튼 및 디자인

- react bootstrap 에서 nav 검색

================================
import Nav from 'react-bootstrap/Nav';

    <Nav variant="tabs" defaultActiveKey="/home">
      <Nav.Item>
        <Nav.Link href="/home">Active</Nav.Link>
      </Nav.Item>
      <Nav.Item>
        <Nav.Link eventKey="link-1">Option 2</Nav.Link>
      </Nav.Item>
      <Nav.Item>
        <Nav.Link eventKey="disabled" disabled>
          Disabled
        </Nav.Link>
      </Nav.Item>
    </Nav>
================================

ⓒ nav 정리 및 탭 만들기
================================
Detail.js

 let [tabState, setTabState] = useState(0);

      <div>
        <Nav variant="tabs" defaultActiveKey="link-0">
          <Nav.Item>
            <Nav.Link eventKey="link-0" 
            onClick={()=>{
              setTabState(0);
            }}>버튼1</Nav.Link>
          </Nav.Item>
          <Nav.Item>
            <Nav.Link eventKey="link-1"
            onClick={()=>{
              setTabState(1);
            }}>버튼2</Nav.Link>
          </Nav.Item>
          <Nav.Item>
            <Nav.Link eventKey="link-2"
            onClick={()=>{
              setTabState(2);
            }}>
              버튼3</Nav.Link>
          </Nav.Item>
        </Nav>
      </div>
================================

ⓓ if 함수로 정리하기

Ⅰ. 함수 만들고
================================
첫째 방법,
function TebContent(props){
  if( props.tabState == 0 ) {
    return (<div>내용 0</div>)
  } 
  if( props.tabState == 1 ) {
    return (<div>내용 1</div>)
  } 
  if( props.tabState == 2 ) {
    return (<div>내용 2</div>)
  } 
}


둘째 방법
function TebContent({tabState}){
  return ( [  <div>내용 1</div>,
		<div>내용 2</div>,
		<div>내용 2</div>][tabState]);
}
================================

Ⅱ. 컴포넌트 처럼 쓰기
================================
  <TebContent tabState={tabState} ></TebContent>
================================


14. 컴포넌트 전환 애니메이션(transition)

ⓐ 삽입된 탭의 내용을 천천히 보이도록 애니메이션 지정하기
Ⅰ. 애니메이션 전,후 동작에 필요한 className 생성
Ⅱ. className에 transition 속성 추가
Ⅲ. 필요한 곳에 부착 opacity가 1이 되는 css 를 적용한다.

ⓑ 투명도가 0에서 1로 변하는 css 만들기
================================
App.css

.ani_start {
  opacity: 0;
}

.ani_end {
  opacity: 1;
  transition: opacity 0.5s;
}
================================

ⓒ 테스트 하기(필요한 곳에 ani_end를 붙인다.
================================
function TebContent({ tabState }) {
  return(
    <div className="ani_start ani_end">
      {
        [<div>내용 1</div>, <div>내용 2</div>, <div>내용 3</div>][tabState]
      }
    </div>
  );
}
================================

ⓓ 버튼 누를 때 ani_end 클래스를 부착한다.
- 즉 tabState가 변경될 때 ani_end 클래스 붙이기
================================

function TebContent({ tabState }) {
  let [fade, setFade] = useState('');
  useEffect(()=>{
    setFade('')
    setFade('ani_end')
  }, [tabState]);

  return(
    <div className={`ani_start ${fade}`}>
      {
        [<div>내용 1</div>, <div>내용 2</div>, <div>내용 3</div>][tabState]
      }
    </div>
  );
}

================================

 이렇게 useEffect 초기화 함수 붙인 후,
 약간의 시간 이후에 적용되도록 코딩해야 함.

  let [fade, setFade] = useState('');
  useEffect(()=>{
    let timer = setTimeout( ()=> {
      setFade('ani_end')
    }, 100);
    
    return () => {
      clearTimeout(timer);
      setFade('');
    }
  }, [tabState]);

================================
※ 리액트 18버전 이후부터는
   automatic batching 기능이 생겼음.
   state 변경 함수가 근처에 있으면, 뭉쳐놨다가 
   한번에 실행 시킴.
   일괄적으로 변경 후 재 랜더링 함.
   결국, 시간차를 두고 실행시켜야 함.
================================

================================
문제. Detail 컴포넌트가 나타날 때 우리가 만든
   애니메이션이 적용되도록 처리

function Detail(props) {
 let [detailFade, setDetailFade] = useState('');	
 ........
 
  useEffect(()=>{
    let t = setTimeout(()=>{
      setDetailFade('ani_end');
    }, 100)
    return ()=> {
      clearTimeout(t);
      setDetailFade('');
    }
  }, [])

   return (    
    <div className={`container ani_start ${detailFade}`}>
    ................
================================

15. Context API

ⓐ Single Page Applicatioin 단점
Ⅰ. 컴포넌트간 state 공유 어려움.
Ⅱ. 부모컴포넌트 → 자식컴포넌트는 props로만 전송 가능

ⓑ 부모자식을 넘어선 컴포넌트에서 state사용

현재는
 <App>  →  <Detail> → <TabContent>
  product state
	
<TabContent>에서 <App>의  product state를 사용하고 싶다.

결국은 props를 전달 → 전달해서 처리해야 함.

ⓒ 테스트 하기
================================
<TabContent> 에서 product.title 출력하기

<TabContent product={findProduct} tabState={tabState}></TabContent>

function TabContent({ tabState , product }) {
 ...........
  return(
    <div className={`ani_start ${fade}`}>
      {
        [<div>{product.title}</div>, <div>내용 2</div>, <div>내용 3</div>][tabState]
      }
    </div>
  );
}

================================

ⓓ props 대신 사용 가능한 것.
Ⅰ. Context API : 리액트 기본문법
 --  성능이슈, 재활용 불가 등으로 사용을 안함.
Ⅱ. Redux 등 외부라이브러리

ⓔ Context API 사용해 보기

================================
App.js

let [stock] = useState([10, 11, 12]);

위 stock 을 Detail, TabContent에서 사용해 보자.

Ⅰ. App.js 맨 위 상단에 state 를 담는 Context 객체 생성

import { createContext } from "react";

export let MyContext = createContext();

Ⅱ. <MyContext>로 원하는 컴포넌트 감싸기

        <Route
          path="/detail/:id"
          element={
            <MyContext.Provider value={{stock}}>
              <div>
                <Detail product={product} />
              </div>
            </MyContext.Provider>
          }
        />


Ⅲ. Detail 과 TabContent에서 가져다 쓰기
첫째, import 하기
--------------------------------------------------------
Detail.js

import { useContext } from "react";
import { MyContext } from './../App.js'
	.............
      <div className="row">
        <div className="col-md-6">
          {stock}
          <img
            alt="신발"
--------------------------------------------------------

<TabContent>

function TabContent({ tabState , product }) {
  let { stock } = useContext(MyContext);{
        [<div>{product.title}{stock}</div>, .............
      }

================================

ⓕ Context API 특징 및 사용안하는 이유
- state 변경 시 랜더링하지 말아야 하는 것도 재랜더링 됨.
- 자식들까지도 재 랜더링 됨.
- 성능이슈 발생 함.
- 다른 페이지에서 컴포넌트를 import 할 경우 문제 발생 가능성 많음.




