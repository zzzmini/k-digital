0. login/logout 메뉴 붙이기

  <Nav>
    <Nav.Link href="#deets">LogIn</Nav.Link>
    <Nav.Link href="#memes">SignUp</Nav.Link>
  </Nav>

1. firebase 프로젝트 생성하기
※ 파이어 베이스는 모바일 및 웹 애플리케이션을 만들기 위해 구글에서 개발한 플랫폼
- 대부분의 앱을 만들 때 필요한 부분 -> 인증, 데이터베이스, 스토리지, 푸시 알림 등
  기능을 다 갖고 있음.
  
ⓐ https://firebase.google.com
ⓑ 시작하기 -> 프로젝트 시작하기 -> 프로젝트 이름넣고 생성하기 -> react-shop-app
ⓒ continue[계속] 눌러서 프로젝트 안으로 들어오기 
ⓓ 앱에 Firebase를 추가하여 시작하기 -> 세번째 웹(</>) 선택
  >> 앱 등록 : react-shop-app
  -> Add Firebase SDK -> npm 사용
  >> npm install firebase --save

ⓔ Firebase SDK 밑에 코드 전부 복사해서
> src 폴더 밑에
> firebase.js 만들기 -> 붙여넣기
> 코드 추가하기
  import { initializeApp } from "firebase/app";
  import "firebase/auth"

  맨 아래
  const app = initializeApp(firebaseConfig);
  export default app;

ⓕ index.js 에 추가하기

// 가져오기만 하면 연결된 거임.
import app from './firebase';

const root = ReactDOM.createRoot(document.getElmentById('root'));

2. Firebase를 이용한 구글 로그인
=======================================================
ⓐ firebase 접근
 시작하기 -> 내 프로젝트 -> react-movie-app -> Authentication -> 시작하기

ⓑ 로그인 방법 설정
 - 첫 번째 로그인 방법을 추가하여 Firebase 인증 시작하기
 - 추가 제공업체 : Google 선택 
 - 우 상단 사용설정을 체크로 변경
 - 아래 프로젝트 지원 이메일 -> 누르면 내 이메일 보임
 - 저장
 - 로그인 제공업체 -> 구글 -> 사용 설정 됨

ⓒ 구글에 firebase 문서로 검색
- https://firebase.google.com/docs?hl=ko 
- 우 상단 검색 창에 --- 로그인 입력
- Firebase UI로 손 쉽게 웹 앱에 로그인 추가 - 선택
- 좌측 Web -> Google 선택

ⓓ 우리가 사용할 부분
--------------------------------------------------------
5. Google 제공업체 객체를 사용해 Firebase에 인증합니다. 
팝업 창을 띄우거나 로그인 페이지로 리디렉션하여 사용자가 
Google 계정에 로그인하도록 유도할 수 있습니다. 
휴대기기의 경우 리디렉션을 사용할 것을 권장합니다.

● 팝업 창을 사용하여 로그인하려면 signInWithPopup을 호출합니다.
--------------------------------------------------------

- 우리가 구현한 페이지 우 상단 숨겨져 있는 로그인 버튼
  누르면 구글 로그인 페이지가 자동으로 나오게 처리하고
  구글 로그인도 해 줌.

3. 로그인 버튼에 연결하기
ⓐ Nav.js 의 로그인 버튼에 구현

   (<Login onClick={handleAuth})>Login</Login> :
   ......

ⓑ handleAuth 함수 만들기

import { getAuth, GoogleAuthProvider } from "firebase/auth";
import { signInWithPopup } from "firebase/auth";

const auth = getAuth();
const provider = new GoogleAuthProvider();

const handleAuth= () => {
   signInWithPopup(auth, provider)
    .then(result => {})
    .catch(error => {
      console.log(error);
    })
}

※ cors 오류 처리

index.html
<meta http-equiv="Cross-Origin-Opener-Policy" content="same-origin" />
추가해 주기

4. Firebase를 이용한 인증 체크
이미 로그인 되어 있는 상태인지 확인하고, 
로그인 되어 있으면 ?
특정 페이지로 강제 리다이렉팅 시키기 위한 절차 등...

안 되어 있으면? 
로그인이 필요한 페이지입니다...  보이고...

로그인 되어 있으면 카트 메뉴, 사용자 이미지, 로그아웃 메뉴 보이게 하기...

그러려면 로그인 체크가 필요함...

사용 메서드

  const [userInfo, setUserInfo] = useState({});

  useEffect(() => {
    onAuthStateChanged(auth, (user) => {
      if (user) {
        ....
      } else {
        ....
      }	 
    });
    }, [ auth, navigate ]);

ⓐ useEffect를 사용해서 auth, navigate가 변하면

ⓑ 로그인 상태를 추적해서

▶ 구현

import { onAuthStateChanged } from "firebase/auth";

  const [userInfo, setUserInfo] = useState({});

  useEffect(() => {
    onAuthStateChanged(auth, (user) => {
      if (user) {
        setUserInfo(user)
        console.log('===== LogIn Success :  ' , userInfo)

      } else {
        console.log('LogOut Success :  ' , userInfo)
      }	 
    });
    }, [ auth, navigate, userInfo ]);

ⓒ 카트 메뉴 보이도록, 이미지, 로그아웃 메뉴 처리


  {
    userInfo === undefined ? null : <Nav.Link
    onClick={() => {
      navigate("/cart");
    }}
  >
    Cart
  </Nav.Link>
  }

  <Nav>
    { userInfo === undefined ? <Nav.Link onClick={handleAuth}>LogIn</Nav.Link> : 
    <div className="userInfoArea">
      <img src={userInfo.photoURL} alt={userInfo.displayName} className="userImage" />
      <Nav.Link href="#memes" onClick={handleLogOut}>LogOut</Nav.Link>
      </div> }            
  </Nav>

  .userInfoArea {
    display: flex;
    align-items: center;
  }
  .userImage {
    width: 30px;
    height: 30px;
    border-radius: 50%;
    display: block;
  }

5. Firebase를 이용한 로그아웃
ⓐ 로그아웃 기능 구현

<span onClick={handleLogOut}>Sign out</span>

import { signOut } from "firebase/auth";

  function handleLogOut(){
    signOut(auth)
    .then(()=>{
      setUserInfo(undefined)
      navigate("/")
    })
    .catch((error)=>{
      console.log(error);
    });
  }


6. localStrorage에 userData 담기
- 화면을 리프레시 하면 사라지는 정보를 저장하고 보여주는 처리
- useEffect 가 딱 한번만 수행되기 때문...

그래서...

useEffect(() => {
  onAuthStateChanged(auth, (user) => {
    console.log('user : ' , user);
    if (user) {
      if(pathname === "/") 		
        navigate("/");
    } else {
      navigate("/");
    }	 
  });
}, [ auth, navigate, pathname ]);

을 주면 괜찮으나... 

이미지는 state에 들어 있기 때문에 

리프레시(F5)가 되면 state가 지워지기 때문임..

그래서 얘 정보를 localStorage에 저장하고 꺼내서 사용해야 함.

https://developer.mozilla.org/ko/docs/Web/API/Window/localStorage

ⓐ 로그인 성공 시 로컬스토리지에 저장
const [userData, setUserData] = useState( {} );

const handleAuth= () => {
   signInWithPopup(auth, provider)
    .then(result => {
      setuserData(result.user);
      console.log('result : ', result);
      localStorage.setItem('userData', 
	    JSON.stringify(result.user));
    })
    .catch(error => {
      console.log(error);
    })
}

※ JSON.stringify() : object를 Json 파일로 변환...

ⓑ 가져오기

이렇게 생성한 localStorage 내용을 userData state의 초기값으로 할당..

function Nav() ...

const initialUserData = localStorage.getItem('userData') ?
  JSON.parse(localStorage.getItem('userData')) : {} ;


const [userData, setUserData] = useState(initialUserData);

7. Firebase를 이용해서 배포하기
ⓐ 설치하기
> npm install -g firebase-tools

ⓑ 파이어베이스 로그인
> firebase login
-- 파이어베이스 CLI 에 접근 함.

ⓒ 프로젝트 빌드하기
> npm run build

ⓓ 파이어 베이스 시작하기
> firebase init

? Are you ready to proceed? (Y/n) 

나오는 메뉴 중....

○ Hosting :  Configure files for Firebase Hosting and ....

선택한 후 스페이스바로 한번 눌러 줌...

> 엔터...

=== Project Setup
현재 프로젝트와 Firebase 상의 프로젝트를 연동 시킴..

> Use an existing project
본인이 만들어 둔 프로젝트 선택

=== Hosting Setup

우리가 npm run build 했으니까... build 폴더 생성됨 ... 얘를 연결

? What do you want to use as your public directory?

>>>>> build ---> 직접 입력

? Configure as .....   single-page app? Y

? Set up automatic builds and deployes with Github?  N 우린 안함
=================
- 깃 저장소 생성
- 연결.. push
- 주소 설정
- 실행 스크립트
  npm install && npm run build
=================


? File build/index.html Overwrite?  N 안함.

Firebase initialization complete!

ⓔ 배포 시작
> firebase deploy

 Deploy complete!

주소 보임...

Project Console : https://console....
Hosting URL : https://react-movie-app.web.app

ⓕ 소스 수정 후 재배포
> npm run build
> firebase deploy