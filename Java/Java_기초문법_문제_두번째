문제 1. 최댓값과 인덱스찾기

9개의 서로 다른 자연수
3, 29, 38, 12, 57, 74, 40, 85, 61
가 주어질 때, 이들 중 최댓값을 찾고 그 최댓값이 몇 번째 
수인지를 구하는 프로그램을 작성하시오.

이 주어지면, 이들 중 
최댓값은 85이고, 이 값은 8번째 수이다.
최솟값은 3이고, 이 값은 1번째 수이다.

출력 : 

최댓값 : 85, 인덱스 : 7
최솟값 : 3, 인덱스 : 1

문제 2.

주사위 두 개를 36,000번 던져서 나오는 모든 경우의 수를 계산하는 프로그램을 작성하세요.
주사위 각각은 1부터 6까지의 정수값을 표시할 수 있으므로 합계는 2부터 12까지입니다.

- 입력 : 없음.

- 출력
아래의 모양과 유사하게 출력되도록 합니다.

Output :
2 : 1026 (0.028500)
3 : 2023 (0.056193)
4 : 2988 (0.083000)
5 : 4086 (0.113500)
6 : 5018 (0.139389)
7 : 5978 (0.166056)
8 : 4928 (0.136889)
9 : 3992 (0.110889)
10 : 3096 (0.086000)
11 : 1907 (0.052972)
12 : 958 (0.026611) 

문제 3. 선택(Selection) 정렬

- 선택정렬은 매 단계에서 가장 작은 원소를 선택해서 앞으로 보냄
- 앞으로 보내진 원소는 더 이상 위치가 변하지 않는다.
- 시간복잡도 O(N^2)로 비효율적 정렬 알고리즘 중 하나.

※ 동작방식
ⓐ 각 단계에서 가장 작은 원소를 선택
ⓑ 현재까지 처리되지 않은 원소들 중 가장 앞의 원소와 교체

예> 4 1 2 5 3 
1단계 : 1 4 2 5 3
2단계 : 1 2 4 5 3
3단계 : 1 2 3 5 4
4단계 : 1 2 3 4 5 


- 입력
배열로 4 1 2 5 3 가 주어진다.

- 출력
위의 예시와 같은 결과 출력.

------------------------------------------------------------------


문제 4. 버블정렬

- 인접한 두 원소를 비교하여, 정렬이 안되어 있으면 위치를 서로 변경
- 시간복잡도 O(N^2)로 비효율적 정렬 알고리즘 중 하나.

※ 동작방식
ⓐ 각 단계에서 인접한 두 개의 원소를 비교하여 큰 값을 뒤로 보냄.
ⓑ 매 회차마다 가장 큰 원소가 맨 뒤로 이동된다.

예> 9 8 2 4 3  
1단계 : 8 2 4 3 9 
2단계 : 2 4 3 8 9
3단계 : 2 3 4 8 9
4단계 : 2 3 4 8 9 

------------------------------------------------------------------


문제 5. 삽입정렬(Insertion)

- 각 숫자를 적절한 위치에 삽입하는 정렬 기법
- 시간복잡도 O(N^2)로 비효율적 정렬 알고리즘 중 하나.

※ 동작방식
ⓐ 각 단계에서 현재 원소가 삽입될 위치를 찾는다.
ⓑ 적절한 위치에 도달할 때까지 반복적으로 왼쪽으로 이동한다.
ⓒ 두번째 원소부터 비교하여 앞으로 이동시킨다.

※ 삽입, 버블정렬에 비해 빠르다. 거의 정렬되어 있는 구조는 더 빠르다.
예> 9 8 2 4 3  
1단계 : 8 9 2 4 3 
2단계 : 2 8 9 4 3
3단계 : 2 4 8 9 3
4단계 : 2 3 4 8 9 


문제 6. 다음 점수들에 대한 순위계산을 한 후 출력하세요

85, 50, 90, 75, 85, 60, 89, 98, 83, 65

문제 7. 임의의 서로다른 세자리 숫자를 사용자가 입력하여 맞추는 게임입니다.
ⓐ 랜덤하게 서로 다른 세자리 숫자를 생성합니다.
ⓑ 사용자에게 서로다른 세자리 숫자를 입력받습니다.
    a, b를 통해 입력받은 수는 세자리 공간을 갖는 배열에 분리하여 저장합니다.
         String[] str = sc.next().split("");
    위 명령어로 입력받은 숫자를 문자열 배열에 각각 나누어 저장할 수 있습니다.
         123 입력 → str[0] = 1, str[1] = 2, str[2] = 3 
    Integer.parseInt 함수로 정수로 변환 할 수 있습니다.
ⓒ 입력받은 세자리 숫자와 랜덤하게 생성한 숫자를 비교하여
   - 자리와 숫자까지 완전 일치하면 : strike
   - 자리는 일치하지 않지만 숫자가 존재한다면 : ball
ⓓ 총 10번의 기회를 부여해 게임을 진행합니다.
   - 10회 이하로 맞춘 경우 
     정답입니다!!!
   - 10회 동안 못 맞춘경우 
     실패했습니다!!! 정답은 000입니다.

예> 생성 : 390
1번째. 서로 다른 세 자리 정수를 입력해 주세요.> 123
0 strike, 1 ball
2번째. 서로 다른 세 자리 정수를 입력해 주세요.> 145
0 strike, 0 ball
3번째. 서로 다른 세 자리 정수를 입력해 주세요.> 236
0 strike, 1 ball
4번째. 서로 다른 세 자리 정수를 입력해 주세요.> 389
1 strike, 1 ball
5번째. 서로 다른 세 자리 정수를 입력해 주세요.> 381
1 strike, 0 ball
6번째. 서로 다른 세 자리 정수를 입력해 주세요.> 307
1 strike, 1 ball
7번째. 서로 다른 세 자리 정수를 입력해 주세요.> 379
1 strike, 1 ball
8번째. 서로 다른 세 자리 정수를 입력해 주세요.> 390
3 strike, 0 ball
정답입니다!!!
계속하시겠습니까(Y/N)

문제 7. 로또번호 생성기를 만듭니다.

Math.Random() 이용해서 로또번호를 6개를 생성한 후에
출력.


문제 8. 주민등록번호 확인 처리하기

배열 13자리를 선언하고
확인하고 싶은 주민번호를 "-"없이 입력받습니다.

String[] jumin = sc.next().split("");
Integer.parseInt 함수로 정수로 변환 할 수 있습니다.

입력받은 수를 주민번호 배열에 분리해서 넣습니다.

아래의 처리 알고리즘에 따라 주민번호가 맞는지 틀리는지 확인한 후 결과를 출력합니다.

맞는 주민번호이면 “올바른 주민번호입니다.” 출력
틀린 주민번호이면 “잘못된 주민번호입니다.” 출력

※ 주민번호 처리 알고리즘

ⓐ 주민번호 13자리 중 맨 마지막 자리를 제외한 각각의 자리에 2,3,4,5,6,7,8,9,2,3,4,5를 곱해서 더한다

ⓑ 그 값을 11로 나눈 나머지를 취한다. (mod)

ⓒ 그 값을 11에서 뺀다.

ⓓ 다시 10으로 나눈 나머지를 취한다.

ⓔ 마지막 값과 같으면 올바른 주민번호


  
